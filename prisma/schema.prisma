datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  introduction  String?
  followCount   Int @default(0)
  followerCount Int @default(0)
  delete_flg Int @default(0)
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  good          Good[]
  follow        Follow[]
  directMessage DirectMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id      String     @id @default(cuid())
  To      String?
  userId  String
  username String
  image   String?
  content String
  createdAt DateTime
  goodCount Int @default(0)
  postCount Int @default(0)
  user    User    @relation(fields: [userId], references: [id])
  good    Good[]
}

model Good {
  id       String     @id @default(cuid())
  postId String
  userId  String
  createdAt DateTime
  post    Post    @relation(fields: [postId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Follow {
  id          String     @id @default(cuid())
  userId  String
  username  String
  followId  String
  followname String
  createdAt DateTime
  user    User    @relation(fields: [userId], references: [id])
}

model DirectMessage {
  id      String     @id @default(cuid())
  userId  String
  targetId String
  username String
  targetname String
  content String
  createdAt DateTime
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId])
}